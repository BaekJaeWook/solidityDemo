package com.citi.tts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>
 * Auto generated code.
 * <p>
 * <strong>Do not modify!</strong>
 * <p>
 * Please use the <a href="https://docs.web3j.io/command_line.html">web3j
 * command line tools</a>, or the
 * org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen
 * module</a> to update.
 *
 * <p>
 * Generated with web3j version 3.2.0.
 */
public class Exchange extends Contract {
	private static final String BINARY = "0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614e51806100536000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303bc4a27146100d55780631a8eb72b146101cf57806333ad57e4146101f85780633a51d2461461025e5780633bed33ce146102cf5780635ab8ea33146102f2578063728ff02914610361578063851030fe1461045b5780638ea00818146104ca578063977377f81461053f57806398ea5fca146105b6578063b0b22c2c146105c0578063c97a413a1461063c578063d1a3b025146106a2575b600080fd5b34156100e057600080fd5b610130600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061071c565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561017757808201518184015260208101905061015c565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101b957808201518184015260208101905061019e565b5050505090500194505050505060405180910390f35b34156101da57600080fd5b6101e26109cc565b6040518082815260200191505060405180910390f35b341561020357600080fd5b61025c600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050610a13565b005b341561026957600080fd5b6102b9600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610d65565b6040518082815260200191505060405180910390f35b34156102da57600080fd5b6102f06004808035906020019091905050610dd2565b005b34156102fd57600080fd5b61035f600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050610f98565b005b341561036c57600080fd5b6103bc600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611f16565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104035780820151818401526020810190506103e8565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561044557808201518184015260208101905061042a565b5050505090500194505050505060405180910390f35b341561046657600080fd5b6104c8600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919050506121c7565b005b34156104d557600080fd5b610525600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061327a565b604051808215151515815260200191505060405180910390f35b341561054a57600080fd5b61059a600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506132a8565b604051808260ff1660ff16815260200191505060405180910390f35b6105be6132d1565b005b34156105cb57600080fd5b61063a600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613405565b005b341561064757600080fd5b6106a0600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050613643565b005b34156106ad57600080fd5b61071a600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803515159060200190919080359060200190919080359060200190919050506139c9565b005b610724614d58565b61072c614d58565b6000610736614d58565b61073e614d58565b60008060008061074d8a6132a8565b9650600160008860ff1660ff168152602001908152602001600020600501546040518059106107795750595b90808252806020026020018201604052509550600160008860ff1660ff168152602001908152602001600020600501546040518059106107b65750595b90808252806020026020018201604052509450600160008860ff1660ff168152602001908152602001600020600401549350600092506000600160008960ff1660ff1681526020019081526020016000206003015411156109ba575b600160008860ff1660ff16815260200190815260200160002060030154841115156109b95783868481518110151561084657fe5b90602001906020020181815250506000915060009050600160008860ff1660ff16815260200190815260200160002060020160008581526020019081526020016000206003015490505b600160008860ff1660ff1681526020019081526020016000206002016000858152602001908152602001600020600401548111151561091f57600160008860ff1660ff1681526020019081526020016000206002016000858152602001908152602001600020600201600082815260200190815260200160002060000154820191508080600101915050610890565b81858481518110151561092e57fe5b9060200190602002018181525050600160008860ff1660ff168152602001908152602001600020600201600085815260200190815260200160002060000154841415610979576109b9565b600160008860ff1660ff16815260200190815260200160002060020160008581526020019081526020016000206000015493508280600101935050610812565b5b85859850985050505050505050915091565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600080610a1f846132a8565b9150600073ffffffffffffffffffffffffffffffffffffffff16600160008460ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610a9957600080fd5b600160008360ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876000604051602001526040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1515610bbb57600080fd5b6102c65a03f11515610bcc57600080fd5b505050604051805190501515141515610be457600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000205483600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560ff1660ff168152602001908152602001600020540110151515610ca157600080fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff168152602001908152602001600020600082825401925050819055508160ff163373ffffffffffffffffffffffffffffffffffffffff167fc0aa5496c7b01c4b317a58e270b45f383bcd6ae57f9e5124db9c0674b77764998542604051808381526020018281526020019250505060405180910390a350505050565b600080610d71836132a8565b9050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008260ff1660ff16815260200190815260200160002054915050919050565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540310151515610e2357600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540311151515610eb257600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610f3f57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fac9513adf40097763b4664bee3693d0f051127c5ac55e33f68926c1612ac59958242604051808381526020018281526020019250505060405180910390a250565b6000806000806000806000610fac8a6132a8565b9650600095506000600160008960ff1660ff168152602001908152602001600020600901541480610ff8575088600160008960ff1660ff16815260200190815260200160002060070154115b1561123e57888802955087861015151561101157600080fd5b88861015151561102057600080fd5b85600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561106e57600080fd5b600086600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403101515156110bf57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031115151561114e57600080fd5b85600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506111a7878a8a33613ed1565b3373ffffffffffffffffffffffffffffffffffffffff168760ff167f2ef51fa215957689865f55575d7d89840bee8fce54b23ef826fea1a304acdd3f8a8c600160008d60ff1660ff16815260200190815260200160002060020160008f81526020019081526020016000206004015460405180848152602001838152602001828152602001935050505060405180910390a3611f0a565b60009450600160008860ff1660ff1681526020019081526020016000206007015493508792505b8884111580156112755750600083115b15611ef457600160008860ff1660ff16815260200190815260200160002060060160008581526020019081526020016000206003015491505b600160008860ff1660ff16815260200190815260200160002060060160008581526020019081526020016000206004015482111580156112ee5750600083115b15611ed057600160008860ff1660ff16815260200190815260200160002060060160008581526020019081526020016000206002016000838152602001908152602001600020600001549050828111151561187a57838102945084600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561139657600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031115151561142557600080fd5b84600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008860ff1660ff1681526020019081526020016000205481600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff16815260200190815260200160002054011015151561152f57600080fd5b60046000600160008a60ff1660ff1681526020019081526020016000206006016000878152602001908152602001600020600201600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560046000600160008c60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600201600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561168657600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff168152602001908152602001600020600082825401925050819055506000600160008960ff1660ff16815260200190815260200160002060060160008681526020019081526020016000206002016000848152602001908152602001600020600001819055508460046000600160008b60ff1660ff1681526020019081526020016000206006016000888152602001908152602001600020600201600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600160008860ff1660ff1681526020019081526020016000206006016000858152602001908152602001600020600301600081548092919060010191905055508660ff167fcbfa5edcd918ef1ec42746c71ac83c456f37330c83a22e44d6cfdca22d56471082868560405180848152602001838152602001828152602001935050505060405180910390a28083039250611cbb565b82600160008960ff1660ff16815260200190815260200160002060060160008681526020019081526020016000206002016000848152602001908152602001600020600001541115156118cc57600080fd5b8383029550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054031115151561196057600080fd5b85600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060046000600160008a60ff1660ff1681526020019081526020016000206006016000878152602001908152602001600020600201600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548660046000600160008c60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600201600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515611b0457600080fd5b82600160008960ff1660ff16815260200190815260200160002060060160008681526020019081526020016000206002016000848152602001908152602001600020600001600082825403925050819055508560046000600160008b60ff1660ff1681526020019081526020016000206006016000888152602001908152602001600020600201600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff16815260200190815260200160002060008282540192505081905550600092508660ff167fcbfa5edcd918ef1ec42746c71ac83c456f37330c83a22e44d6cfdca22d56471084868560405180848152602001838152602001828152602001935050505060405180910390a25b600160008860ff1660ff16815260200190815260200160002060060160008581526020019081526020016000206004015482148015611d3e57506000600160008960ff1660ff1681526020019081526020016000206006016000868152602001908152602001600020600201600084815260200190815260200160002060000154145b15611ec357600160008860ff1660ff1681526020019081526020016000206009016000815480929190600190039190505550600160008860ff1660ff168152602001908152602001600020600601600085815260200190815260200160002060000154841480611dde57506000600160008960ff1660ff168152602001908152602001600020600201600086815260200190815260200160002060000154145b15611e0a576000600160008960ff1660ff16815260200190815260200160002060070181905550611ec2565b600160008860ff1660ff168152602001908152602001600020600601600085815260200190815260200160002060000154600160008960ff1660ff168152602001908152602001600020600701819055506000600160008960ff1660ff1681526020019081526020016000206006016000600160008b60ff1660ff1681526020019081526020016000206002016000888152602001908152602001600020600001548152602001908152602001600020600101819055505b5b81806001019250506112ae565b600160008860ff1660ff168152602001908152602001600020600701549350611265565b6000831115611f0957611f088a8a85610f98565b5b5b50505050505050505050565b611f1e614d58565b611f26614d58565b6000611f30614d58565b611f38614d58565b600080600080611f478a6132a8565b9650600160008860ff1660ff16815260200190815260200160002060090154604051805910611f735750595b90808252806020026020018201604052509550600160008860ff1660ff16815260200190815260200160002060090154604051805910611fb05750595b90808252806020026020018201604052509450600160008860ff1660ff168152602001908152602001600020600701549350600092506000600160008960ff1660ff1681526020019081526020016000206007015411156121b5575b600160008860ff1660ff16815260200190815260200160002060080154841115156121b45783868481518110151561204057fe5b90602001906020020181815250506000915060009050600160008860ff1660ff16815260200190815260200160002060060160008581526020019081526020016000206003015490505b600160008860ff1660ff1681526020019081526020016000206006016000858152602001908152602001600020600401548111151561211957600160008860ff1660ff168152602001908152602001600020600601600085815260200190815260200160002060020160008281526020019081526020016000206000015482019150808060010191505061208a565b81858481518110151561212857fe5b90602001906020020181815250506000600160008960ff1660ff1681526020019081526020016000206006016000868152602001908152602001600020600001541415612174576121b4565b600160008860ff1660ff1681526020019081526020016000206006016000858152602001908152602001600020600001549350828060010193505061200c565b5b85859850985050505050505050915091565b60008060008060008060006121db8a6132a8565b965060009550600094506000600160008960ff1660ff16815260200190815260200160002060050154148061222b575088600160008960ff1660ff16815260200190815260200160002060030154105b156124b657888802955087861015151561224457600080fd5b88861015151561225357600080fd5b87600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff16815260200190815260200160002054101515156122b857600080fd5b600088600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff16815260200190815260200160002054031015151561232057600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156123af57600080fd5b87600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff1681526020019081526020016000206000828254039250508190555061241f878a8a33614517565b3373ffffffffffffffffffffffffffffffffffffffff168760ff167fc7d136f10bcb424de2ff60d5473d863ed2fdcd5d352e045d89ee9581f54f6afb8a8c600160008d60ff1660ff16815260200190815260200160002060060160008f81526020019081526020016000206004015460405180848152602001838152602001828152602001935050505060405180910390a361326e565b600160008860ff1660ff1681526020019081526020016000206003015493508792505b8884101580156124e95750600083115b1561325857600160008860ff1660ff16815260200190815260200160002060020160008581526020019081526020016000206003015491505b600160008860ff1660ff16815260200190815260200160002060020160008581526020019081526020016000206004015482111580156125625750600083115b1561323457600160008860ff1660ff168152602001908152602001600020600201600085815260200190815260200160002060020160008381526020019081526020016000206000015490508281111515612af557838102945080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff168152602001908152602001600020541015151561262157600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff16815260200190815260200160002060008282540392505081905550600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff1681526020019081526020016000205403101515156126ed57600080fd5b60036000600160008a60ff1660ff1681526020019081526020016000206002016000878152602001908152602001600020600201600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008860ff1660ff168152602001908152602001600020548160036000600160008c60ff1660ff1681526020019081526020016000206002016000898152602001908152602001600020600201600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff16815260200190815260200160002054011015151561287257600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561290157600080fd5b8060036000600160008b60ff1660ff1681526020019081526020016000206002016000888152602001908152602001600020600201600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff168152602001908152602001600020600082825401925050819055506000600160008960ff1660ff168152602001908152602001600020600201600086815260200190815260200160002060020160008481526020019081526020016000206000018190555084600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600160008860ff1660ff1681526020019081526020016000206002016000858152602001908152602001600020600301600081548092919060010191905055508660ff167fcbfa5edcd918ef1ec42746c71ac83c456f37330c83a22e44d6cfdca22d56471082868560405180848152602001838152602001828152602001935050505060405180910390a28083039250613004565b6000838203111515612b0657600080fd5b838302955082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff1681526020019081526020016000205410151515612b7057600080fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff1681526020019081526020016000206000828254039250508190555082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff1681526020019081526020016000205410151515612c3957600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515612cc857600080fd5b60036000600160008a60ff1660ff1681526020019081526020016000206002016000878152602001908152602001600020600201600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008860ff1660ff168152602001908152602001600020548360036000600160008c60ff1660ff1681526020019081526020016000206002016000898152602001908152602001600020600201600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff168152602001908152602001600020540110151515612e4d57600080fd5b82600160008960ff1660ff168152602001908152602001600020600201600086815260200190815260200160002060020160008481526020019081526020016000206000016000828254039250508190555085600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508260036000600160008b60ff1660ff1681526020019081526020016000206002016000888152602001908152602001600020600201600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff168152602001908152602001600020600082825401925050819055508660ff167fcbfa5edcd918ef1ec42746c71ac83c456f37330c83a22e44d6cfdca22d56471084868560405180848152602001838152602001828152602001935050505060405180910390a2600092505b600160008860ff1660ff1681526020019081526020016000206002016000858152602001908152602001600020600401548214801561308757506000600160008960ff1660ff1681526020019081526020016000206002016000868152602001908152602001600020600201600084815260200190815260200160002060000154145b1561322757600160008860ff1660ff1681526020019081526020016000206005016000815480929190600190039190505550600160008860ff1660ff16815260200190815260200160002060020160008581526020019081526020016000206001015484148061312757506000600160008960ff1660ff168152602001908152602001600020600201600086815260200190815260200160002060010154145b15613153576000600160008960ff1660ff16815260200190815260200160002060030181905550613226565b600160008860ff1660ff168152602001908152602001600020600201600085815260200190815260200160002060010154600160008960ff1660ff16815260200190815260200160002060030181905550600160008860ff1660ff16815260200190815260200160002060030154600160008960ff1660ff1681526020019081526020016000206002016000600160008b60ff1660ff1681526020019081526020016000206002016000888152602001908152602001600020600101548152602001908152602001600020600001819055505b5b8180600101925050612522565b600160008860ff1660ff1681526020019081526020016000206003015493506124d9565b600083111561326d5761326c8a8a856121c7565b5b5b50505050505050505050565b60008061328683614b5f565b905060008160ff16141561329d57600091506132a2565b600191505b50919050565b6000806132b483614b5f565b905060008160ff161115156132c857600080fd5b80915050919050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561336057600080fd5b34600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167f42dbebeb8f6fb795e3007753aef2d4b1a292dd123f6de06a41050186741506373442604051808381526020018281526020019250505060405180910390a2565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561363f576134638261327a565b15151561346f57600080fd5b600260009054906101000a900460ff1660ff166001600260009054906101000a900460ff160160ff161115156134a457600080fd5b6002600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508160016000600260009054906101000a900460ff1660ff1660ff1681526020019081526020016000206001019080519060200190613515929190614d6c565b508060016000600260009054906101000a900460ff1660ff1660ff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6c71eb76d5d82031f490d3e44dc01d298444e569078199b14510435d81b59ff7600260009054906101000a900460ff168342604051808460ff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156136025780820151818401526020810190506135e7565b50505050905090810190601f16801561362f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b5050565b60008061364f846132a8565b9150600073ffffffffffffffffffffffffffffffffffffffff16600160008460ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156136c957600080fd5b600160008360ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560ff1660ff16815260200190815260200160002054031015151561377057600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000205483600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560ff1660ff16815260200190815260200160002054031115151561382d57600080fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff16815260200190815260200160002060008282540392505081905550600115158173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561394057600080fd5b6102c65a03f1151561395157600080fd5b50505060405180519050151514151561396957600080fd5b8160ff163373ffffffffffffffffffffffffffffffffffffffff167faed5c5198ccd7615c0128c72fcfc060e97b14315cb791a46bf42b5b6f36c38b98542604051808381526020018281526020019250505060405180910390a350505050565b60008060006139d7876132a8565b92508515613c77573373ffffffffffffffffffffffffffffffffffffffff16600160008560ff1660ff1681526020019081526020016000206006016000878152602001908152602001600020600201600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613a7d57600080fd5b600160008460ff1660ff16815260200190815260200160002060060160008681526020019081526020016000206002016000858152602001908152602001600020600001549150600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff1681526020019081526020016000205482600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff168152602001908152602001600020540110151515613b8157600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560ff1660ff168152602001908152602001600020600082825401925050819055506000600160008560ff1660ff16815260200190815260200160002060060160008781526020019081526020016000206002016000868152602001908152602001600020600001819055508260ff167fffac5f4941e92bc6814610a825eeff0ae9bb4a17d47c0e2353c6889b2b550fb88686604051808381526020018281526020019250505060405180910390a2613ec8565b3373ffffffffffffffffffffffffffffffffffffffff16600160008560ff1660ff1681526020019081526020016000206002016000878152602001908152602001600020600201600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613d1557600080fd5b84600160008560ff1660ff1681526020019081526020016000206002016000878152602001908152602001600020600201600086815260200190815260200160002060000154029050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515613ded57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000600160008560ff1660ff16815260200190815260200160002060020160008781526020019081526020016000206002016000868152602001908152602001600020600001819055508260ff167f5f2fdca15d8ab2ad3f590066add3054471b3603ca44a66f12e124e9c97ec19558686604051808381526020018281526020019250505060405180910390a25b50505050505050565b600080600080600160008960ff1660ff16815260200190815260200160002060020160008881526020019081526020016000206004016000815480929190600101919050555060408051908101604052808781526020018673ffffffffffffffffffffffffffffffffffffffff16815250600160008a60ff1660ff16815260200190815260200160002060020160008981526020019081526020016000206002016000600160008c60ff1660ff16815260200190815260200160002060020160008b81526020019081526020016000206004015481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060018060008a60ff1660ff168152602001908152602001600020600201600089815260200190815260200160002060040154141561450d5760018060008a60ff1660ff168152602001908152602001600020600201600089815260200190815260200160002060030181905550600160008960ff1660ff16815260200190815260200160002060050160008154809291906001019190505550600160008960ff1660ff168152602001908152602001600020600301549350600160008960ff1660ff16815260200190815260200160002060040154925060008314806140ec57508683115b1561425257600084141561418b5786600160008a60ff1660ff1681526020019081526020016000206003018190555086600160008a60ff1660ff1681526020019081526020016000206002016000898152602001908152602001600020600001819055506000600160008a60ff1660ff16815260200190815260200160002060020160008981526020019081526020016000206001018190555061422c565b86600160008a60ff1660ff16815260200190815260200160002060020160008581526020019081526020016000206001018190555082600160008a60ff1660ff1681526020019081526020016000206002016000898152602001908152602001600020600001819055506000600160008a60ff1660ff1681526020019081526020016000206002016000898152602001908152602001600020600101819055505b86600160008a60ff1660ff1681526020019081526020016000206004018190555061450c565b8684101561431f5786600160008a60ff1660ff16815260200190815260200160002060020160008681526020019081526020016000206000018190555086600160008a60ff1660ff16815260200190815260200160002060020160008981526020019081526020016000206000018190555083600160008a60ff1660ff16815260200190815260200160002060020160008981526020019081526020016000206001018190555086600160008a60ff1660ff1681526020019081526020016000206003018190555061450b565b600160008960ff1660ff168152602001908152602001600020600301549150600090505b600082118015614351575080155b1561450a578682108015614394575086600160008a60ff1660ff168152602001908152602001600020600201600084815260200190815260200160002060000154115b156144d25781600160008a60ff1660ff168152602001908152602001600020600201600089815260200190815260200160002060010181905550600160008960ff1660ff168152602001908152602001600020600201600083815260200190815260200160002060000154600160008a60ff1660ff16815260200190815260200160002060020160008981526020019081526020016000206000018190555086600160008a60ff1660ff1681526020019081526020016000206002016000600160008c60ff1660ff16815260200190815260200160002060020160008681526020019081526020016000206000015481526020019081526020016000206001018190555086600160008a60ff1660ff168152602001908152602001600020600201600084815260200190815260200160002060000181905550600190505b600160008960ff1660ff1681526020019081526020016000206002016000838152602001908152602001600020600101549150614343565b5b5b5b5050505050505050565b600080600080600160008960ff1660ff16815260200190815260200160002060060160008881526020019081526020016000206004016000815480929190600101919050555060408051908101604052808781526020018673ffffffffffffffffffffffffffffffffffffffff16815250600160008a60ff1660ff16815260200190815260200160002060060160008981526020019081526020016000206002016000600160008c60ff1660ff16815260200190815260200160002060060160008b81526020019081526020016000206004015481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060018060008a60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600401541415614b555760018060008a60ff1660ff168152602001908152602001600020600601600089815260200190815260200160002060030181905550600160008960ff1660ff16815260200190815260200160002060090160008154809291906001019190505550600160008960ff1660ff168152602001908152602001600020600701549350600160008960ff1660ff168152602001908152602001600020600801549250600083148061473257508683105b156148995760008414156147d25786600160008a60ff1660ff168152602001908152602001600020600701819055506000600160008a60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600001819055506000600160008a60ff1660ff168152602001908152602001600020600601600089815260200190815260200160002060010181905550614873565b86600160008a60ff1660ff16815260200190815260200160002060060160008581526020019081526020016000206000018190555082600160008a60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600101819055506000600160008a60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600001819055505b86600160008a60ff1660ff16815260200190815260200160002060080181905550614b54565b868411156149675786600160008a60ff1660ff16815260200190815260200160002060060160008681526020019081526020016000206001018190555083600160008a60ff1660ff1681526020019081526020016000206006016000898152602001908152602001600020600001819055506000600160008a60ff1660ff16815260200190815260200160002060060160008981526020019081526020016000206001018190555086600160008a60ff1660ff16815260200190815260200160002060070181905550614b53565b600160008960ff1660ff168152602001908152602001600020600701549150600090505b600082118015614999575080155b15614b525786821080156149dc575086600160008a60ff1660ff168152602001908152602001600020600601600084815260200190815260200160002060000154115b15614b1a5781600160008a60ff1660ff168152602001908152602001600020600601600089815260200190815260200160002060010181905550600160008960ff1660ff168152602001908152602001600020600601600083815260200190815260200160002060000154600160008a60ff1660ff16815260200190815260200160002060060160008981526020019081526020016000206000018190555086600160008a60ff1660ff1681526020019081526020016000206006016000600160008c60ff1660ff16815260200190815260200160002060060160008681526020019081526020016000206000015481526020019081526020016000206001018190555086600160008a60ff1660ff168152602001908152602001600020600601600084815260200190815260200160002060000181905550600190505b600160008960ff1660ff168152602001908152602001600020600601600083815260200190815260200160002060000154915061498b565b5b5b5b5050505050505050565b600080600190505b600260009054906101000a900460ff1660ff168160ff16111515614bc457614baa600160008360ff1660ff16815260200190815260200160002060010184614bcf565b15614bb757809150614bc9565b8080600101915050614b67565b600091505b50919050565b600080614bda614dec565b6000859250849150815183805460018160011615610100020316600290049050141515614c0a5760009350614d4f565b600090505b82805460018160011615610100020316600290049050811015614d4a578181815181101515614c3a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828154600181600116156101000203166002900481101515614cc657fe5b815460011615614ce55790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515614d3d5760009350614d4f565b8080600101915050614c0f565b600193505b50505092915050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614dad57805160ff1916838001178555614ddb565b82800160010185558215614ddb579182015b82811115614dda578251825591602001919060010190614dbf565b5b509050614de89190614e00565b5090565b602060405190810160405280600081525090565b614e2291905b80821115614e1e576000816000905550600101614e06565b5090565b905600a165627a7a72305820e3e6bdf4d87aedbbf472c7bef1c88ba8d05715b8277ad368924508a8c70669a50029";

	protected static final HashMap<String, String> _addresses;

	static {
		_addresses = new HashMap<>();
		_addresses.put("1514481837533", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
		_addresses.put("1514488078234", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
		_addresses.put("1514401623912", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
		_addresses.put("1514303435834", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
		_addresses.put("1514338525243", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
		_addresses.put("1514439729099", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
		_addresses.put("1514415756486", "0x6ccdbd92e62d95f2d179a5e266efcc49d1d270e4");
	}

	protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
	}

	public List<DepositForTokenReceivedEventResponse> getDepositForTokenReceivedEvents(
			TransactionReceipt transactionReceipt) {
		final Event event = new Event("DepositForTokenReceived",
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}, new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<DepositForTokenReceivedEventResponse> responses = new ArrayList<DepositForTokenReceivedEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			DepositForTokenReceivedEventResponse typedResponse = new DepositForTokenReceivedEventResponse();
			typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
			typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<DepositForTokenReceivedEventResponse> depositForTokenReceivedEventObservable(
			DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		final Event event = new Event("DepositForTokenReceived",
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}, new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, DepositForTokenReceivedEventResponse>() {
			@Override
			public DepositForTokenReceivedEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				DepositForTokenReceivedEventResponse typedResponse = new DepositForTokenReceivedEventResponse();
				typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
				typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public List<WithdrawalTokenEventResponse> getWithdrawalTokenEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("WithdrawalToken", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
		}, new TypeReference<Uint256>() {
		}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}, new TypeReference<Uint256>() {
		}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<WithdrawalTokenEventResponse> responses = new ArrayList<WithdrawalTokenEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			WithdrawalTokenEventResponse typedResponse = new WithdrawalTokenEventResponse();
			typedResponse._to = (String) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
			typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<WithdrawalTokenEventResponse> withdrawalTokenEventObservable(DefaultBlockParameter startBlock,
			DefaultBlockParameter endBlock) {
		final Event event = new Event("WithdrawalToken", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
		}, new TypeReference<Uint256>() {
		}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}, new TypeReference<Uint256>() {
		}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawalTokenEventResponse>() {
			@Override
			public WithdrawalTokenEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				WithdrawalTokenEventResponse typedResponse = new WithdrawalTokenEventResponse();
				typedResponse._to = (String) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
				typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public List<DepositForEthReceivedEventResponse> getDepositForEthReceivedEvents(
			TransactionReceipt transactionReceipt) {
		final Event event = new Event("DepositForEthReceived",
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<DepositForEthReceivedEventResponse> responses = new ArrayList<DepositForEthReceivedEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			DepositForEthReceivedEventResponse typedResponse = new DepositForEthReceivedEventResponse();
			typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<DepositForEthReceivedEventResponse> depositForEthReceivedEventObservable(
			DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		final Event event = new Event("DepositForEthReceived",
				Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, DepositForEthReceivedEventResponse>() {
			@Override
			public DepositForEthReceivedEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				DepositForEthReceivedEventResponse typedResponse = new DepositForEthReceivedEventResponse();
				typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public List<WithdrawalEthEventResponse> getWithdrawalEthEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("WithdrawalEth", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
		}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}, new TypeReference<Uint256>() {
		}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<WithdrawalEthEventResponse> responses = new ArrayList<WithdrawalEthEventResponse>(valueList.size());
		for (EventValues eventValues : valueList) {
			WithdrawalEthEventResponse typedResponse = new WithdrawalEthEventResponse();
			typedResponse._to = (String) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<WithdrawalEthEventResponse> withdrawalEthEventObservable(DefaultBlockParameter startBlock,
			DefaultBlockParameter endBlock) {
		final Event event = new Event("WithdrawalEth", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
		}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}, new TypeReference<Uint256>() {
		}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawalEthEventResponse>() {
			@Override
			public WithdrawalEthEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				WithdrawalEthEventResponse typedResponse = new WithdrawalEthEventResponse();
				typedResponse._to = (String) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public List<LimitSellOrderCreatedEventResponse> getLimitSellOrderCreatedEvents(
			TransactionReceipt transactionReceipt) {
		final Event event = new Event("LimitSellOrderCreated",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Address>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<LimitSellOrderCreatedEventResponse> responses = new ArrayList<LimitSellOrderCreatedEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			LimitSellOrderCreatedEventResponse typedResponse = new LimitSellOrderCreatedEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._who = (String) eventValues.getIndexedValues().get(1).getValue();
			typedResponse._amountTokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<LimitSellOrderCreatedEventResponse> limitSellOrderCreatedEventObservable(
			DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		final Event event = new Event("LimitSellOrderCreated",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Address>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, LimitSellOrderCreatedEventResponse>() {
			@Override
			public LimitSellOrderCreatedEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				LimitSellOrderCreatedEventResponse typedResponse = new LimitSellOrderCreatedEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._who = (String) eventValues.getIndexedValues().get(1).getValue();
				typedResponse._amountTokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
				return typedResponse;
			}
		});
	}

	public List<SellOrderFulfilledEventResponse> getSellOrderFulfilledEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("SellOrderFulfilled",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<SellOrderFulfilledEventResponse> responses = new ArrayList<SellOrderFulfilledEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			SellOrderFulfilledEventResponse typedResponse = new SellOrderFulfilledEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<SellOrderFulfilledEventResponse> sellOrderFulfilledEventObservable(
			DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		final Event event = new Event("SellOrderFulfilled",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, SellOrderFulfilledEventResponse>() {
			@Override
			public SellOrderFulfilledEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				SellOrderFulfilledEventResponse typedResponse = new SellOrderFulfilledEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
				return typedResponse;
			}
		});
	}

	public List<SellOrderCanceledEventResponse> getSellOrderCanceledEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("SellOrderCanceled",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<SellOrderCanceledEventResponse> responses = new ArrayList<SellOrderCanceledEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			SellOrderCanceledEventResponse typedResponse = new SellOrderCanceledEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<SellOrderCanceledEventResponse> sellOrderCanceledEventObservable(DefaultBlockParameter startBlock,
			DefaultBlockParameter endBlock) {
		final Event event = new Event("SellOrderCanceled",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, SellOrderCanceledEventResponse>() {
			@Override
			public SellOrderCanceledEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				SellOrderCanceledEventResponse typedResponse = new SellOrderCanceledEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public List<LimitBuyOrderCreatedEventResponse> getLimitBuyOrderCreatedEvents(
			TransactionReceipt transactionReceipt) {
		final Event event = new Event("LimitBuyOrderCreated",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Address>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<LimitBuyOrderCreatedEventResponse> responses = new ArrayList<LimitBuyOrderCreatedEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			LimitBuyOrderCreatedEventResponse typedResponse = new LimitBuyOrderCreatedEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._who = (String) eventValues.getIndexedValues().get(1).getValue();
			typedResponse._amountTokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<LimitBuyOrderCreatedEventResponse> limitBuyOrderCreatedEventObservable(
			DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		final Event event = new Event("LimitBuyOrderCreated",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Address>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, LimitBuyOrderCreatedEventResponse>() {
			@Override
			public LimitBuyOrderCreatedEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				LimitBuyOrderCreatedEventResponse typedResponse = new LimitBuyOrderCreatedEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._who = (String) eventValues.getIndexedValues().get(1).getValue();
				typedResponse._amountTokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
				return typedResponse;
			}
		});
	}

	public List<BuyOrderFulfilledEventResponse> getBuyOrderFulfilledEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("BuyOrderFulfilled",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<BuyOrderFulfilledEventResponse> responses = new ArrayList<BuyOrderFulfilledEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			BuyOrderFulfilledEventResponse typedResponse = new BuyOrderFulfilledEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<BuyOrderFulfilledEventResponse> buyOrderFulfilledEventObservable(DefaultBlockParameter startBlock,
			DefaultBlockParameter endBlock) {
		final Event event = new Event("BuyOrderFulfilled",
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, BuyOrderFulfilledEventResponse>() {
			@Override
			public BuyOrderFulfilledEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				BuyOrderFulfilledEventResponse typedResponse = new BuyOrderFulfilledEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
				return typedResponse;
			}
		});
	}

	public List<BuyOrderCanceledEventResponse> getBuyOrderCanceledEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("BuyOrderCanceled", Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}, new TypeReference<Uint256>() {
		}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<BuyOrderCanceledEventResponse> responses = new ArrayList<BuyOrderCanceledEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			BuyOrderCanceledEventResponse typedResponse = new BuyOrderCanceledEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
			typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<BuyOrderCanceledEventResponse> buyOrderCanceledEventObservable(DefaultBlockParameter startBlock,
			DefaultBlockParameter endBlock) {
		final Event event = new Event("BuyOrderCanceled", Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
		}, new TypeReference<Uint256>() {
		}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, BuyOrderCanceledEventResponse>() {
			@Override
			public BuyOrderCanceledEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				BuyOrderCanceledEventResponse typedResponse = new BuyOrderCanceledEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
				typedResponse._priceInWei = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._orderKey = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
				return typedResponse;
			}
		});
	}

	public List<TokenAddedToSystemEventResponse> getTokenAddedToSystemEvents(TransactionReceipt transactionReceipt) {
		final Event event = new Event("TokenAddedToSystem", Arrays.<TypeReference<?>>asList(),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Uint256>() {
				}));
		List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
		ArrayList<TokenAddedToSystemEventResponse> responses = new ArrayList<TokenAddedToSystemEventResponse>(
				valueList.size());
		for (EventValues eventValues : valueList) {
			TokenAddedToSystemEventResponse typedResponse = new TokenAddedToSystemEventResponse();
			typedResponse._symbolIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse._token = (String) eventValues.getNonIndexedValues().get(1).getValue();
			typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public Observable<TokenAddedToSystemEventResponse> tokenAddedToSystemEventObservable(
			DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		final Event event = new Event("TokenAddedToSystem", Arrays.<TypeReference<?>>asList(),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}, new TypeReference<Utf8String>() {
				}, new TypeReference<Uint256>() {
				}));
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(event));
		return web3j.ethLogObservable(filter).map(new Func1<Log, TokenAddedToSystemEventResponse>() {
			@Override
			public TokenAddedToSystemEventResponse call(Log log) {
				EventValues eventValues = extractEventParameters(event, log);
				TokenAddedToSystemEventResponse typedResponse = new TokenAddedToSystemEventResponse();
				typedResponse._symbolIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
				typedResponse._token = (String) eventValues.getNonIndexedValues().get(1).getValue();
				typedResponse._timestamp = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
				return typedResponse;
			}
		});
	}

	public RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>> getBuyOrderBook(String symbolName) {
		final Function function = new Function("getBuyOrderBook",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName)),
				Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
				}, new TypeReference<DynamicArray<Uint256>>() {
				}));
		return new RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>>(
				new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
					@Override
					public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						;
						return new Tuple2<List<BigInteger>, List<BigInteger>>(
								(List<BigInteger>) results.get(0).getValue(),
								(List<BigInteger>) results.get(1).getValue());
					}
				});
	}

	public RemoteCall<BigInteger> getEthBalanceInWei() {
		Function function = new Function("getEthBalanceInWei", Arrays.<Type>asList(),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteCall<TransactionReceipt> depositToken(String symbolName, BigInteger amount) {
		Function function = new Function("depositToken",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName),
						new org.web3j.abi.datatypes.generated.Uint256(amount)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<BigInteger> getBalance(String symbolName) {
		Function function = new Function("getBalance",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}));
		return executeRemoteCallSingleValueReturn(function, BigInteger.class);
	}

	public RemoteCall<TransactionReceipt> withdrawEther(BigInteger amountInWei) {
		Function function = new Function("withdrawEther",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amountInWei)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<TransactionReceipt> buyToken(String symbolName, BigInteger priceInWei, BigInteger amount) {
		Function function = new Function("buyToken",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName),
						new org.web3j.abi.datatypes.generated.Uint256(priceInWei),
						new org.web3j.abi.datatypes.generated.Uint256(amount)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>> getSellOrderBook(String symbolName) {
		final Function function = new Function("getSellOrderBook",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName)),
				Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
				}, new TypeReference<DynamicArray<Uint256>>() {
				}));
		return new RemoteCall<Tuple2<List<BigInteger>, List<BigInteger>>>(
				new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
					@Override
					public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
						List<Type> results = executeCallMultipleValueReturn(function);
						;
						return new Tuple2<List<BigInteger>, List<BigInteger>>(
								(List<BigInteger>) results.get(0).getValue(),
								(List<BigInteger>) results.get(1).getValue());
					}
				});
	}

	public RemoteCall<TransactionReceipt> sellToken(String symbolName, BigInteger priceInWei, BigInteger amount) {
		Function function = new Function("sellToken",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName),
						new org.web3j.abi.datatypes.generated.Uint256(priceInWei),
						new org.web3j.abi.datatypes.generated.Uint256(amount)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<Boolean> hasToken(String symbolName) {
		Function function = new Function("hasToken",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
				}));
		return executeRemoteCallSingleValueReturn(function, Boolean.class);
	}

	public RemoteCall<TransactionReceipt> getSymbolIndexOrThrow(String symbolName) {
		Function function = new Function("getSymbolIndexOrThrow",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<TransactionReceipt> depositEther(BigInteger weiValue) {
		Function function = new Function("depositEther", Arrays.<Type>asList(),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function, weiValue);
	}

	public RemoteCall<TransactionReceipt> addToken(String symbolName, String erc20TokenAddress) {
		Function function = new Function("addToken",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName),
						new org.web3j.abi.datatypes.Address(erc20TokenAddress)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<TransactionReceipt> withdrawToken(String symbolName, BigInteger amount) {
		Function function = new Function("withdrawToken",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName),
						new org.web3j.abi.datatypes.generated.Uint256(amount)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteCall<TransactionReceipt> cancelOrder(String symbolName, Boolean isSellOrder, BigInteger priceInWei,
			BigInteger offerKey) {
		Function function = new Function("cancelOrder",
				Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(symbolName),
						new org.web3j.abi.datatypes.Bool(isSellOrder),
						new org.web3j.abi.datatypes.generated.Uint256(priceInWei),
						new org.web3j.abi.datatypes.generated.Uint256(offerKey)),
				Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
	}

	public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice,
			BigInteger gasLimit) {
		return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
	}

	public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager,
			BigInteger gasPrice, BigInteger gasLimit) {
		return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
	}

	protected String getStaticDeployedAddress(String networkId) {
		return _addresses.get(networkId);
	}

	public static String getPreviouslyDeployedAddress(String networkId) {
		return _addresses.get(networkId);
	}

	public static class DepositForTokenReceivedEventResponse {
		public String _from;

		public BigInteger _symbolIndex;

		public BigInteger _amount;

		public BigInteger _timestamp;
	}

	public static class WithdrawalTokenEventResponse {
		public String _to;

		public BigInteger _symbolIndex;

		public BigInteger _amount;

		public BigInteger _timestamp;
	}

	public static class DepositForEthReceivedEventResponse {
		public String _from;

		public BigInteger _amount;

		public BigInteger _timestamp;
	}

	public static class WithdrawalEthEventResponse {
		public String _to;

		public BigInteger _amount;

		public BigInteger _timestamp;
	}

	public static class LimitSellOrderCreatedEventResponse {
		public BigInteger _symbolIndex;

		public String _who;

		public BigInteger _amountTokens;

		public BigInteger _priceInWei;

		public BigInteger _orderKey;
	}

	public static class SellOrderFulfilledEventResponse {
		public BigInteger _symbolIndex;

		public BigInteger _amount;

		public BigInteger _priceInWei;

		public BigInteger _orderKey;
	}

	public static class SellOrderCanceledEventResponse {
		public BigInteger _symbolIndex;

		public BigInteger _priceInWei;

		public BigInteger _orderKey;
	}

	public static class LimitBuyOrderCreatedEventResponse {
		public BigInteger _symbolIndex;

		public String _who;

		public BigInteger _amountTokens;

		public BigInteger _priceInWei;

		public BigInteger _orderKey;
	}

	public static class BuyOrderFulfilledEventResponse {
		public BigInteger _symbolIndex;

		public BigInteger _amount;

		public BigInteger _priceInWei;

		public BigInteger _orderKey;
	}

	public static class BuyOrderCanceledEventResponse {
		public BigInteger _symbolIndex;

		public BigInteger _priceInWei;

		public BigInteger _orderKey;
	}

	public static class TokenAddedToSystemEventResponse {
		public BigInteger _symbolIndex;

		public String _token;

		public BigInteger _timestamp;
	}
}
